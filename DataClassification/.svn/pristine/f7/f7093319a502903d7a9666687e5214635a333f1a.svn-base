using Alba.CsConsoleFormat.Fluent;
using ExcelDataReader;
using MySql.Data.MySqlClient;
using Npgsql;
using OfficeOpenXml;
using Oracle.DataAccess.Client;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Net.Mail;
using System.Text;

namespace ViewBLOB
{
    class Program
    {
        private static readonly string exceptionPath = Directory.GetCurrentDirectory() + @"\output\" + @"Exception.txt";
        private static readonly Dictionary<string, object> allkey = new Dictionary<string, object>();
        private static string connectionString;
        private static string datasource;
        private static string fromEmail;
        private static string Cc;
        private static string Recipients;
        private static string appServer;
        private static string DatabaseName;
        private static string csvOutputfilename;
        private static bool sendEmail;
        private static DataTable data;
        private static DataSet result;

        //private static DataTable dataTable;

        static void Main(string[] args)
        {

            Console.Title = "Schema Information Generation";
            //var t = ExcelToTable(@"C:\Users\sookeke\Downloads\Litigation Management System - 20190910 Export (3).xlsx");
            if (!Directory.Exists(@"output"))
            {
                Directory.CreateDirectory(@"output");
            }
            File.Create(exceptionPath).Close();

            try
            {
                connectionString = ConfigurationManager.AppSettings["connectionString"];
                datasource = ConfigurationManager.AppSettings["DataSourceType"];
                csvOutputfilename = ConfigurationManager.AppSettings["OutputFilename"];
                fromEmail = ConfigurationManager.AppSettings["fromEmail"];
                Recipients = ConfigurationManager.AppSettings["Recipients"];
                Cc = ConfigurationManager.AppSettings["cCEmail"];
                appServer = ConfigurationManager.AppSettings["appServer"];
                DatabaseName = ConfigurationManager.AppSettings["DatabaseName"];
                sendEmail = ConfigurationManager.AppSettings["SendEmail"].ToString().ToUpper().Equals("YES") ? true : false;
            }
            catch (Exception con)
            {

                Console.WriteLine("Exception occurs in app.config {0}", con.Message);
                Console.WriteLine("Program will exit: Press ENTER to exist..");
                Console.ReadLine();

                File.WriteAllText(exceptionPath, con.Message + Environment.NewLine + Environment.NewLine);
                System.Environment.Exit(1);
            }
            if (datasource == "SpreadSheet")
            {
                //check app.config
                if (!CheckAppConfigSpreadSheet())
                {
                    Console.WriteLine("Program will exit: Press ENTER to exist..");
                    Console.ReadLine();
                    System.Environment.Exit(1);
                }
                data = new DataTable();
                DataColumn[] dc = new DataColumn[] {
                  new DataColumn("TABLE_NAME", typeof(string)),
                   new DataColumn("SCHEMA", typeof(string)),
                    new DataColumn("COLUMN_NAME", typeof(string)),
                      new DataColumn("DATA_TYPE", typeof(string)),
                        new DataColumn("Nullable", typeof(string)),
                          new DataColumn("COLUMN_ID", typeof(string)),
                            new DataColumn("COMMENTS", typeof(string)),
                              new DataColumn("PKconstraintName", typeof(string)),
                new DataColumn("Min", typeof(string)),
                new DataColumn("max", typeof(string)),
                new DataColumn("Retain NULL",typeof(string)),
                new DataColumn("RetainEmptyString",typeof(string)),
                new DataColumn("Public", typeof(string)),
                new DataColumn("Personal", typeof(string)),
                new DataColumn("Sensitive",typeof(string)),
                new DataColumn("Masking Rule", typeof(string)),
                 new DataColumn("Rule set by", typeof(string)),
                new DataColumn("Rule Reasoning",typeof(string)),
                new DataColumn("COMPLETED", typeof(string)),
                 new DataColumn("StringFormat", typeof(string))
                };
                data.Columns.AddRange(dc);
                Random random = new Random();
                List<string> rantbool = new List<string>() { "Yes", "No" };
                List<string> isNull = new List<string>() { "TRUE" };
                List<string> completed = new List<string>() { "Completed", "Uncompleted" };
                List<string> MaskingRules = new List<string>() { "No Masking required", "Replace Value with fake data", "Shuffle", "Math", "Flagged", "Scramble" };
                var tables = ExcelToTable(connectionString);
                foreach (DataTable item in tables)
                {

                    foreach (DataColumn c in item.Columns)
                    {
                        var min = "";
                        var max = "";


                        if (c.DataType == typeof(string))
                        {
                            var o = item.AsEnumerable().Select(al => al.Field<string>(c.ColumnName)).Distinct().ToList().OrderByDescending(s => (s == null ? 0 : s.Length));
                            if (o.FirstOrDefault() == null)
                            {
                                max = "0";
                            }
                            else
                                max = Convert.ToString(o.DefaultIfEmpty("0").FirstOrDefault().Length);
                            if (o.LastOrDefault() == null)
                            {
                                min = "0";
                            }
                            else
                            {

                                min = Convert.ToString(o.DefaultIfEmpty("0").LastOrDefault().Length);
                            }
                        }
                        else if (c.DataType == typeof(System.DateTime))
                        {
                            var o = item.AsEnumerable().Select(al => al.Field<DateTime?>(c.ColumnName)).Distinct().ToList();
                            min = Convert.ToString(o.Min());
                            max = Convert.ToString(o.Max());
                        }
                        else if (c.DataType == typeof(double))
                        {
                            var o = item.AsEnumerable().Select(al => al.Field<double?>(c.ColumnName)).Distinct().ToList();
                            min = Convert.ToString(o.Min());
                            max = Convert.ToString(o.Max());
                        }
                        else if (c.DataType == typeof(decimal))
                        {
                            var o = item.AsEnumerable().Select(al => al.Field<decimal?>(c.ColumnName)).Distinct().ToList();
                            min = Convert.ToString(o.Min());
                            max = Convert.ToString(o.Max());
                        }
                        else
                        {
                            //c.DataType = typeof(string);
                            var o = item.AsEnumerable().Select(al => al.Field<string>(c.ColumnName)).Distinct().ToList().OrderByDescending(s => (s == null ? 0 : s.Length));
                            if (o.FirstOrDefault() == null)
                            {
                                max = "0";
                            }
                            else
                                max = Convert.ToString(o.DefaultIfEmpty("0").FirstOrDefault().Length);
                            if (o.LastOrDefault() == null)
                            {
                                min = "0";
                            }
                            else
                            {

                                min = Convert.ToString(o.DefaultIfEmpty("0").LastOrDefault().Length);
                            }
                        }
                        data.Rows.Add(
                            item.TableName, "",
                            c.ColumnName,
                            c.DataType.Name, "", "", "",
                            string.Empty,
                            min, max,
                            isNull[random.Next(0, isNull.Count)].ToString(),
                            "FALSE",
                            rantbool[random.Next(0, rantbool.Count)].ToString(),
                            rantbool[random.Next(0, rantbool.Count)].ToString(),
                            rantbool[random.Next(0, rantbool.Count)].ToString(),
                            MaskingRules[random.Next(0, MaskingRules.Count)].ToString(),
                            "BA Name", "",
                            completed[random.Next(0, completed.Count)].ToString(),
                            ""

                            );

                    }

                }

            }
            else
            {
                //check app.config
                if (!CheckAppConfig())
                {
                    Console.WriteLine("Program will exit: Press ENTER to exist..");
                    Console.ReadLine();
                    System.Environment.Exit(1);
                }
                data = new DataTable();
                string scriptPath = "";
                if (datasource.ToUpper() == "SQLSERVER")
                {
                    scriptPath = @"Tab_ColumnsSQL.sql";
                }
                else if (datasource.ToUpper() == "ORACLESERVER")
                {
                    scriptPath = @"Tab_ColumnsOracle.sql";
                }
                else if (datasource.ToUpper() == "POSTGRESSERVER")
                {
                    scriptPath = @"Tab_Columns_Postgres.sql";
                }
                else if (datasource.ToUpper() == "MYSQLSERVER")
                {
                    scriptPath = @"Tab_ColumnsMySQL.sql";
                }


                DataTable getdata = new DataTable();
                data = GetdataTable(connectionString, datasource, scriptPath);
                var tablename = data.Rows.OfType<DataRow>().Select(dr => dr.Field<string>("table_name")).ToList();
                var columnList = data.Rows.OfType<DataRow>().Select(dr => dr.Field<string>("column_name")).ToList();
                getdata.Merge(data);
                DataColumn[] dc = new DataColumn[] {
                new DataColumn("Min", typeof(string)),
                new DataColumn("max", typeof(string)),
                new DataColumn("Retain NULL",typeof(string)),
                new DataColumn("RetainEmptyString",typeof(string)),
                new DataColumn("Public", typeof(string)),
                new DataColumn("Personal", typeof(string)),
                new DataColumn("Sensitive",typeof(string)),
                new DataColumn("Masking Rule", typeof(string)),
                 new DataColumn("Rule set by", typeof(string)),
                new DataColumn("Rule Reasoning",typeof(string)),
                new DataColumn("COMPLETED", typeof(string)),
                new DataColumn("StringFormat", typeof(string))
                };
                //data.Columns.Add("Min");
                // data.Columns.Add("max");
                //data.Columns.Add("Retain NULL"); //add more columns
                data.Columns.AddRange(dc);
                Random random = new Random();
                List<string> rantbool = new List<string>() { "Yes", "No" };
                List<string> isNull = new List<string>() { "TRUE" };
                List<string> completed = new List<string>() { "Completed", "Uncompleted" };
                List<string> MaskingRules = new List<string>() { "No Masking required", "Replace Value with fake data", "Shuffle", "Math", "Flagged", "Scramble" };

                foreach (DataColumn columns in data.Columns)
                {
                    foreach (DataRow rows in data.Rows)
                    {
                        rows["Retain NULL"] = isNull[random.Next(0, isNull.Count)].ToString(); ;
                        rows["RetainEmptyString"] = "FALSE";
                        rows["COMPLETED"] = completed[random.Next(0, completed.Count)].ToString(); ;
                        rows["StringFormat"] = "";
                        rows["Public"] = rantbool[random.Next(0, rantbool.Count)].ToString();
                        rows["Personal"] = rantbool[random.Next(0, rantbool.Count)].ToString(); ;
                        rows["Sensitive"] = rantbool[random.Next(0, rantbool.Count)].ToString(); ;
                        rows["Rule set by"] = "BA Name";
                        rows["Masking Rule"] = MaskingRules[random.Next(0, MaskingRules.Count)].ToString(); ;
                        if (string.IsNullOrEmpty(rows["PKconstraintName"].ToString()))
                        {
                            rows["PKconstraintName"] = Convert.ToString(rows["PK_ID"]);
                        }
                        if (rows["data_type"].ToString().ToUpper().Contains("DATE"))
                        {
                            string tname = rows["table_name"].ToString();
                            string colname = rows["column_name"].ToString();
                            DataTable dtMinMax = new DataTable();
                            dtMinMax = GetMinMax(rows["table_name"].ToString(), rows["column_name"].ToString(), connectionString, datasource);
                            if (dtMinMax != null && dtMinMax.Rows.Count > 0)
                            {
                                var min = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<DateTime?>("Min")).ToList()[0];
                                var max = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<DateTime?>("Max")).ToList()[0];
                                rows["Min"] = min;
                                rows["Max"] = max;
                                data.AcceptChanges();
                            }

                        }
                        else if (rows["data_type"].ToString().ToUpper().Contains("NUMBER") || rows["data_type"].ToString().ToUpper().Contains("MONEY") || rows["data_type"].ToString().ToUpper().Contains("DECIMAL"))
                        {
                            string tname = rows["table_name"].ToString();
                            string colname = rows["column_name"].ToString();
                            DataTable dtMinMax = new DataTable();
                            dtMinMax = GetMinMax(rows["table_name"].ToString(), rows["column_name"].ToString(), connectionString, datasource);
                            if (dtMinMax != null && dtMinMax.Rows.Count > 0)
                            {
                                var min = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<decimal?>("MIN")).ToList()[0];
                                var max = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<decimal?>("MAX")).ToList()[0];
                                rows["Min"] = min;
                                rows["Max"] = max;
                                data.AcceptChanges();
                            }

                        }
                        else if (rows["data_type"].ToString().ToUpper().Contains("FLOAT"))
                        {
                            string tname = rows["table_name"].ToString();
                            string colname = rows["column_name"].ToString();
                            DataTable dtMinMax = new DataTable();
                            dtMinMax = GetMinMax(rows["table_name"].ToString(), rows["column_name"].ToString(), connectionString, datasource);
                            if (dtMinMax != null && dtMinMax.Rows.Count > 0)
                            {
                                var min = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<double?>("MIN")).ToList()[0];
                                var max = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<double?>("MAX")).ToList()[0];
                                rows["Min"] = min;
                                rows["Max"] = max;
                                data.AcceptChanges();
                            }

                        }
                        else if (rows["data_type"].ToString().ToUpper().Contains("BIT"))
                        {
                            string tname = rows["table_name"].ToString();
                            string colname = rows["column_name"].ToString();
                            DataTable dtMinMax = new DataTable();
                            dtMinMax = GetMinMax(rows["table_name"].ToString(), rows["column_name"].ToString(), connectionString, datasource);
                            if (dtMinMax != null && dtMinMax.Rows.Count > 0)
                            {
                                var min = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<bool?>("MIN")).ToList()[0];
                                var max = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<bool?>("MAX")).ToList()[0];
                                rows["Min"] = min;
                                rows["Max"] = max;
                                data.AcceptChanges();
                            }

                        }
                        else if (rows["data_type"].ToString().ToUpper().Equals("INT") || rows["data_type"].ToString().ToUpper().Equals("INTEGER"))
                        {
                            string tname = rows["table_name"].ToString();
                            string colname = rows["column_name"].ToString();
                            DataTable dtMinMax = new DataTable();
                            dtMinMax = GetMinMax(rows["table_name"].ToString(), rows["column_name"].ToString(), connectionString, datasource);
                            if (dtMinMax != null && dtMinMax.Rows.Count > 0)
                            {
                                var min = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<int?>("MIN")).ToList()[0];
                                var max = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<int?>("MAX")).ToList()[0];
                                rows["Min"] = min;
                                rows["Max"] = max;
                                data.AcceptChanges();
                            }

                        }
                        else if (rows["data_type"].ToString().ToUpper().Contains("VARCHAR2") || rows["data_type"].ToString().ToUpper().Contains("VARCHAR") || rows["data_type"].ToString().ToLower().Contains("character") || rows["data_type"].ToString().ToLower().Contains("text"))
                        {
                            string tname = rows["table_name"].ToString();
                            string colname = rows["column_name"].ToString();
                            DataTable dtMinMax = new DataTable();
                            dtMinMax = GetMinMax(rows["table_name"].ToString(), rows["column_name"].ToString(), connectionString, datasource);
                            if (dtMinMax != null && dtMinMax.Rows.Count > 0)
                            {
                                //var min = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<decimal?>("MIN")).ToList()[0];
                                var tt = dtMinMax;

                                var MaxNvarchar = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<object>("MaxNvarchar")).ToList()[0];
                                //rows["Min"] = min;
                                rows["Max"] = MaxNvarchar;
                                data.AcceptChanges();
                            }

                        }
                        else
                        {

                        }
                    }
                }
                data.Columns.Remove("PK_ID");

            }
            //write to excel       
            if (data.Rows != null)
            {
                DataTableToExcel(data, csvOutputfilename, csvOutputfilename);
                data.PrintList(true, 50);

                Colors.WriteLine("Total Columns: ".Red(), "", data.Rows.Count.ToString().Yellow());

                Console.WriteLine("Hit Enter to Continue.....".ToUpper());
                Console.ReadLine();
                if (sendEmail)
                {
                    SendEmail(Recipients, csvOutputfilename + @"\" + csvOutputfilename + ".xlsx", appServer, fromEmail, DatabaseName, Cc);
                }
                //exportToExcel(data, "APP_GWP");
            }

        }
        private static string GetSignature()
        {

            return File.ReadAllText(@"Signature.htm");
        }
        private static void SendEmail(string recipients, string attachment, string appServer, string fromEmail, string database, string Cc)
        {
            try
            {
                var sig = GetSignature();
                var r = recipients.Split('.')[0];
                string name = Char.ToUpper(r[0]) + r.Remove(0, 1);
                MailMessage mail = new MailMessage()
                {

                    Subject = "Data Classification SpreadSheet for " + database,
                    IsBodyHtml = true,
                    Body = "Hello " + name + ", <br/> " + "<p><b>This message is sent via an inbox that does not receive messages, please do not reply to this email.</b>" + " <br />" + "<b>..................</b>" + "</p> " +

                         "<p> Attached is the Data Classification Spreasheet for " + database + ". Thank you </p>" +
                          "<br />" +
                         sig +
                         "<br />" +
                         "</body>" +
                         "</html>",
                    From = new MailAddress(fromEmail, "MOTI Datamasking TRAN:EX")

                };
                SmtpClient SmtpServer = new SmtpClient(appServer);
                //mail.Sender.
                mail.To.Add(recipients);
                if (!string.IsNullOrEmpty(Cc))
                {
                    mail.CC.Add(Cc);
                }
                mail.Attachments.Add(new Attachment(attachment));
                SmtpServer.Port = 25;
                SmtpServer.Credentials = new System.Net.NetworkCredential();
                //SmtpServer.EnableSsl = true;
                SmtpServer.Send(mail);
                Console.WriteLine("mail Send");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
                Console.ReadLine();
            }
        }
        private static void DataTableToExcel(DataTable dataTable, string directory, string _tablename)
        {
            dataTable.TableName = _tablename;

            try
            {
                //HttpContext.Current.Response.Clear();
                if (!Directory.Exists(directory))
                {
                    Directory.CreateDirectory(directory);
                }

                var format = new ExcelTextFormat
                {
                    EOL = "\r\n"
                };
                using (ExcelPackage pack = new ExcelPackage())
                {
                    ExcelWorksheet ws = pack.Workbook.Worksheets.Add(dataTable.TableName);
                    ws.Cells["A1"].LoadFromDataTable(dataTable, true, OfficeOpenXml.Table.TableStyles.Medium28);
                    var ms = new System.IO.MemoryStream();
                    pack.SaveAs(new FileInfo(directory + @"\" + directory + ".xlsx"));

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                Console.WriteLine("Hit enter to exit");
                Console.ReadLine();
            }
        }
        private static DataTableCollection ExcelToTable(string path)
        {
            DataTable dataTable = new DataTable();
            result = new DataSet();
            dataTable.Columns.Clear();
            dataTable.Rows.Clear();
            dataTable.Clear();
            if (true)
            {


                using (FileStream fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))
                {
                    IExcelDataReader excelReader = null;
                    if (Path.GetExtension(path).ToUpper() == ".XLSX")
                    {
                        excelReader = ExcelReaderFactory.CreateOpenXmlReader(fileStream);
                    }
                    else if (Path.GetExtension(path).ToUpper() == ".XLS")
                    {
                        //1. Reading from a binary Excel file ('97-2003 format; *.xls)
                        excelReader = ExcelReaderFactory.CreateBinaryReader(fileStream);
                    }
                    else
                        throw new ArgumentOutOfRangeException();
                    if (excelReader != null)
                    {
                        result = excelReader.AsDataSet(new ExcelDataSetConfiguration()
                        {
                            ConfigureDataTable = (_) => new ExcelDataTableConfiguration()
                            {
                                UseHeaderRow = true
                            }
                        });


                        //Set to Table
                        dataTable = result.Tables[0].AsDataView().ToTable();

                        //foreach (DataTable item in result.Tables)
                        //{
                        //    foreach (var i in item.Columns)
                        //    {

                        //    }

                        //}
                    }
                }
            }

            else
                throw new ArgumentException("Invalid sheet extension", path);

            return result.Tables;
        }
        private static void WriteTofile(DataTable textTable, string directory)
        {
            StringBuilder fileContent = new StringBuilder();
            //int i = 0;
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }
            if (textTable.Columns.Count == 0)
            {
                return;
            }
            foreach (var col in textTable.Columns)
            {
                fileContent.Append(col.ToString() + ",");
            }

            fileContent.Replace(",", System.Environment.NewLine, fileContent.Length - 1, 1);

            foreach (DataRow dr in textTable.Rows)
            {
                foreach (var column in dr.ItemArray)
                {
                    fileContent.Append("\"" + column.ToString() + "\",");
                }

                fileContent.Replace(",", System.Environment.NewLine, fileContent.Length - 1, 1);
            }
            Console.WriteLine(directory);
            Console.ReadLine();
            Console.WriteLine(Directory.GetCurrentDirectory() + @"\" + directory + @"\" + directory + ".csv");
            Console.ReadLine();
            System.IO.File.WriteAllText(directory + @"\" + directory + ".csv", fileContent.ToString());

        }
        private static DataTable GetdataTable(string connectionString1, string datasource, string scriptpath)
        {
            DataTable dataTable = new DataTable();
            if (datasource.ToUpper() == "ORACLESERVER")
            {
                using (OracleConnection oracleConnection = new OracleConnection(connectionString1))
                {
                    string squery = File.ReadAllText(scriptpath);
                    //System.Collections.Generic.IEnumerable<string> commandStrings = Regex.Split(squery, @"^\s*GO\s*$",
                    //RegexOptions.Multiline | RegexOptions.IgnoreCase);


                    try
                    {
                        oracleConnection.Open();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Exception occurs {0}", e.Message);
                        Console.WriteLine("Program will exit: Press ENTER to exist..");
                        Console.ReadLine();

                        File.WriteAllText(exceptionPath, e.Message + Environment.NewLine + Environment.NewLine);
                        System.Environment.Exit(1);
                    }
                    using (OracleDataAdapter oda = new OracleDataAdapter(squery, oracleConnection))
                    {
                        try
                        {
                            //Fill the data table with select statement's query results:
                            int recordsAffectedSubscriber = 0;

                            recordsAffectedSubscriber = oda.Fill(dataTable);

                        }
                        catch (Exception ex)
                        {

                            File.WriteAllText(exceptionPath, ex.Message + Environment.NewLine + Environment.NewLine);

                        }
                    }

                    return dataTable;

                }
            }
            else if (datasource.ToUpper() == "SQLSERVER")
            {
                using (SqlConnection SqlConnection = new SqlConnection(connectionString1))
                {
                    string squery = File.ReadAllText(scriptpath);
                    //System.Collections.Generic.IEnumerable<string> commandStrings = Regex.Split(squery, @"^\s*GO\s*$",
                    //RegexOptions.Multiline | RegexOptions.IgnoreCase);


                    try
                    {
                        SqlConnection.Open();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Exception occurs {0}", e.Message);
                        Console.WriteLine("Program will exit: Press ENTER to exist..");
                        Console.ReadLine();

                        File.WriteAllText(exceptionPath, e.Message + Environment.NewLine + Environment.NewLine);
                        System.Environment.Exit(1);
                    }
                    using (SqlDataAdapter oda = new SqlDataAdapter(squery, SqlConnection))
                    {
                        try
                        {
                            //Fill the data table with select statement's query results:
                            int recordsAffectedSubscriber = 0;

                            recordsAffectedSubscriber = oda.Fill(dataTable);

                        }
                        catch (Exception ex)
                        {

                            File.WriteAllText(exceptionPath, ex.Message + Environment.NewLine + Environment.NewLine);
                        }
                    }

                    return dataTable;

                }
            }
            else if (datasource.ToUpper() == "POSTGRESSERVER")
            {
                using (NpgsqlConnection postgreConnection = new NpgsqlConnection(connectionString1))
                {
                    string squery = File.ReadAllText(scriptpath);
                    //System.Collections.Generic.IEnumerable<string> commandStrings = Regex.Split(squery, @"^\s*GO\s*$",
                    //RegexOptions.Multiline | RegexOptions.IgnoreCase);
                    try
                    {
                        postgreConnection.Open();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Exception occurs {0}", e.Message);
                        Console.WriteLine("Program will exit: Press ENTER to exist..");
                        Console.ReadLine();

                        File.WriteAllText(exceptionPath, e.Message + Environment.NewLine + Environment.NewLine);
                        System.Environment.Exit(1);
                    }

                    using (NpgsqlDataAdapter oda = new NpgsqlDataAdapter(squery, postgreConnection))
                    {
                        try
                        {
                            //Fill the data table with select statement's query results:
                            int recordsAffectedSubscriber = 0;

                            recordsAffectedSubscriber = oda.Fill(dataTable);

                        }
                        catch (Exception ex)
                        {
                            File.WriteAllText(exceptionPath, ex.Message + Environment.NewLine + Environment.NewLine);
                        }
                    }

                    return dataTable;

                }
            }
            else if (datasource.ToUpper() == "MYSQLSERVER")
            {
                using (MySqlConnection mySQLConnection = new MySqlConnection(connectionString1))
                {
                    string squery = File.ReadAllText(scriptpath);
                    //System.Collections.Generic.IEnumerable<string> commandStrings = Regex.Split(squery, @"^\s*GO\s*$",
                    //RegexOptions.Multiline | RegexOptions.IgnoreCase);

                    try
                    {
                        mySQLConnection.Open();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Exception occurs {0}", e.Message);
                        Console.WriteLine("Program will exit: Press ENTER to exist..");
                        Console.ReadLine();

                        File.WriteAllText(exceptionPath, e.Message + Environment.NewLine + Environment.NewLine);
                        System.Environment.Exit(1);
                    }
                    using (MySqlDataAdapter oda = new MySqlDataAdapter(squery, mySQLConnection))
                    {
                        try
                        {
                            //Fill the data table with select statement's query results:
                            int recordsAffectedSubscriber = 0;

                            recordsAffectedSubscriber = oda.Fill(dataTable);

                        }
                        catch (Exception ex)
                        {

                            File.WriteAllText(exceptionPath, ex.Message + Environment.NewLine + Environment.NewLine);
                        }
                    }

                    return dataTable;

                }
            }
            else
                return null;

        }
        private static DataTable GetMinMax(string table, string column, string connectionString1, string DataSource)
        {
            DataTable dataTable = new DataTable();
            string schema = ConfigurationManager.AppSettings["schema"];
            if (DataSource.ToUpper() == "OracleServer".ToUpper())
            {
                using (OracleConnection oracleConnection = new OracleConnection(connectionString1))
                {
                    string squery = "Select Min(" + column + ") as Min, Max(" + column + ") as Max, Max(Length(" + column + ")) as MaxNvarchar  from " + table;



                    //System.Collections.Generic.IEnumerable<string> commandStrings = Regex.Split(squery, @"^\s*GO\s*$",
                    //RegexOptions.Multiline | RegexOptions.IgnoreCase);
                    try
                    {
                        oracleConnection.Open();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Exception occurs {0}", e.Message);
                        Console.WriteLine("Program will exit: Press ENTER to exist..");
                        Console.ReadLine();
                        File.WriteAllText(exceptionPath, e.Message + Environment.NewLine + Environment.NewLine);
                        System.Environment.Exit(1);
                    }

                    using (OracleDataAdapter oda = new OracleDataAdapter(squery, oracleConnection))
                    {
                        try
                        {
                            //Fill the data table with select statement's query results:
                            int recordsAffectedSubscriber = 0;

                            recordsAffectedSubscriber = oda.Fill(dataTable);

                        }
                        catch (Exception ex)
                        {

                            File.AppendAllText(exceptionPath, ex.Message + Environment.NewLine + Environment.NewLine);
                        }
                    }
                    //int FileSize = 0;
                    return dataTable;
                }
            }
            else if (DataSource.ToUpper() == "SqlServer".ToUpper())
            {
                using (SqlConnection SqlConnection = new SqlConnection(connectionString1))
                {
                    string squery = "Select Min(" + column + ") as Min, Max(" + column + ") as Max, Max(Len(" + column + ")) as MaxNvarchar  from " + table;
                    //System.Collections.Generic.IEnumerable<string> commandStrings = Regex.Split(squery, @"^\s*GO\s*$",
                    //RegexOptions.Multiline | RegexOptions.IgnoreCase);
                    try
                    {
                        SqlConnection.Open();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Exception occurs {0}", e.Message);
                        Console.WriteLine("Program will exit: Press ENTER to exist..");
                        Console.ReadLine();
                        File.WriteAllText(exceptionPath, e.Message + Environment.NewLine + Environment.NewLine);
                        System.Environment.Exit(1);
                    }

                    using (SqlDataAdapter oda = new SqlDataAdapter(squery, SqlConnection))
                    {
                        try
                        {
                            //Fill the data table with select statement's query results:
                            int recordsAffectedSubscriber = 0;

                            recordsAffectedSubscriber = oda.Fill(dataTable);

                        }
                        catch (Exception ex)
                        {

                            File.AppendAllText(exceptionPath, ex.Message + Environment.NewLine + Environment.NewLine);
                        }
                    }
                    //int FileSize = 0;
                    return dataTable;
                }
            }
            else if (DataSource.ToUpper() == "PostgresServer".ToUpper())
            {
                using (NpgsqlConnection postgresConnection = new NpgsqlConnection(connectionString1))
                {
                    string squery = $"Select Min({column}) as Min, Max({column}) as Max, (select character_maximum_length from information_schema.columns  where table_schema = '{schema}' and column_name = '{column}' and table_name = '{table}') as MaxNvarchar  from " + table;
                    //System.Collections.Generic.IEnumerable<string> commandStrings = Regex.Split(squery, @"^\s*GO\s*$",
                    //RegexOptions.Multiline | RegexOptions.IgnoreCase);
                    try
                    {
                        postgresConnection.Open();
                    }
                    catch (Exception e)
                    {

                        Console.WriteLine("Exception occurs {0}", e.Message);
                        Console.WriteLine("Program will exit: Press ENTER to exist..");
                        Console.ReadLine();
                        File.WriteAllText(exceptionPath, e.Message + Environment.NewLine + Environment.NewLine);
                        System.Environment.Exit(1);
                    }

                    using (NpgsqlDataAdapter oda = new NpgsqlDataAdapter(squery, postgresConnection))
                    {
                        try
                        {
                            //Fill the data table with select statement's query results:
                            int recordsAffectedSubscriber = 0;

                            recordsAffectedSubscriber = oda.Fill(dataTable);

                        }
                        catch (Exception ex)
                        {

                            File.AppendAllText(exceptionPath, ex.Message + Environment.NewLine + Environment.NewLine);
                        }
                    }
                    //int FileSize = 0;
                    return dataTable;
                }
            }
            else if (DataSource.ToUpper() == "MYSQLSERVER")
            {
                using (MySqlConnection mySqlConnection = new MySqlConnection(connectionString1))
                {
                    //string squery = $"Select Min({column}) as Min, Max({column}) as Max, (select character_maximum_length from information_schema.columns  where table_schema = '{schema}' and column_name = '{column}' and table_name = '{table}') as MaxNvarchar  from " + table;
                    string squery = "Select Min(" + column + ") as Min, Max(" + column + ") as Max, Max(Length(" + column + ")) as MaxNvarchar  from " + table;

                    //System.Collections.Generic.IEnumerable<string> commandStrings = Regex.Split(squery, @"^\s*GO\s*$",
                    //RegexOptions.Multiline | RegexOptions.IgnoreCase);
                    try
                    {
                        mySqlConnection.Open();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Exception occurs {0}", e.Message);
                        Console.WriteLine("Program will exit: Press ENTER to exist..");
                        Console.ReadLine();
                        File.WriteAllText(exceptionPath, e.Message + Environment.NewLine + Environment.NewLine);
                        System.Environment.Exit(1);
                    }

                    using (MySqlDataAdapter oda = new MySqlDataAdapter(squery, mySqlConnection))
                    {
                        try
                        {
                            //Fill the data table with select statement's query results:
                            int recordsAffectedSubscriber = 0;

                            recordsAffectedSubscriber = oda.Fill(dataTable);

                        }
                        catch (Exception ex)
                        {

                            File.AppendAllText(exceptionPath, ex.Message + Environment.NewLine + Environment.NewLine);
                        }
                    }
                    //int FileSize = 0;
                    return dataTable;
                }
            }
            else
            {
                return null;
            }

        }
        public enum AppConfig
        {
            DatabaseName,
            OutputFilename,
            DataSourceType,
            SqlPath,
            schema,
            ConnectionString,
            SendEmail,
            appServer,
            fromEmail,
            Recipients



        }
        public static bool CheckAppConfig()
        {
            bool flag = false;
            List<string> allKeys = new List<string>();
            foreach (string key in ConfigurationManager.AppSettings.AllKeys)
            {
                switch (key)
                {
                    case nameof(AppConfig.DatabaseName):
                        allkey.Add(key, ConfigurationManager.AppSettings[key].ToString());
                        break;
                    case nameof(AppConfig.ConnectionString):
                        allkey.Add(key, ConfigurationManager.AppSettings[key].ToString());
                        break;
                    case nameof(AppConfig.OutputFilename):
                        allkey.Add(key, ConfigurationManager.AppSettings[key].ToString());
                        break;
                    case nameof(AppConfig.DataSourceType):
                        allkey.Add(key, ConfigurationManager.AppSettings[key].ToString());
                        break;
                    case nameof(AppConfig.SqlPath):
                        allkey.Add(key, ConfigurationManager.AppSettings[key].ToString());
                        break;
                    case nameof(AppConfig.schema):
                        allkey.Add(key, ConfigurationManager.AppSettings[key].ToString());
                        break;
                    case nameof(AppConfig.fromEmail):
                        allkey.Add(key, ConfigurationManager.AppSettings[key].ToString());
                        break;
                    case nameof(AppConfig.appServer):
                        allkey.Add(key, ConfigurationManager.AppSettings[key].ToString());
                        break; ;
                    case nameof(AppConfig.SendEmail):
                        bool b = ConfigurationManager.AppSettings[key].ToString().ToUpper().Equals("YES") ? true : false;
                        allkey.Add(key, b);
                        break;
                    default:
                        break;
                }


            }
            if (allkey.Values.Where(n => n.Equals(string.Empty)).Count() != 0)
            {
                //var xxx = allkey.Values.Where(n => n.Equals(string.Empty));
                Console.WriteLine("Referencing a null app key value: Mandatory app key value is not set in the App.config" + Environment.NewLine);
                Console.WriteLine(string.Join(Environment.NewLine, allkey.Where(n => n.Value.ToString() == string.Empty).Select(n => n.Key + " : " + n.Value + "Null").ToArray()));
                Console.Title = "Referencing a Null key";
                flag = false;
            }
            else
                flag = true;

            //check email validation and recipient
            if (allkey.Where(n => n.Key.ToUpper().Equals("SendEmail".ToUpper())).Select(n => n.Value).Select(n => n).ToArray().First().Equals(true))
            {
                if (string.IsNullOrEmpty(fromEmail)
                    || string.IsNullOrEmpty(Recipients) 
                    || string.IsNullOrEmpty(appServer))
                {
                    Console.WriteLine("Sending data classification SpreadSheet via email requires fromEmail, RecipientEmail and appServer address to be set in the app.config");
                    return false;
                }
            }
            return flag;
        }
        public static bool CheckAppConfigSpreadSheet()
        {
            bool flag = false;
            List<string> allKeys = new List<string>();
            foreach (string key in ConfigurationManager.AppSettings.AllKeys)
            {
                switch (key)
                {
                    case nameof(AppConfig.DatabaseName):
                        allkey.Add(key, ConfigurationManager.AppSettings[key].ToString());
                        break;
                    case nameof(AppConfig.ConnectionString):
                        allkey.Add(key, ConfigurationManager.AppSettings[key].ToString());
                        break;
                    case nameof(AppConfig.OutputFilename):
                        allkey.Add(key, ConfigurationManager.AppSettings[key].ToString());
                        break;
                    case nameof(AppConfig.DataSourceType):
                        allkey.Add(key, ConfigurationManager.AppSettings[key].ToString());
                        break;
                    case nameof(AppConfig.fromEmail):
                        allkey.Add(key, ConfigurationManager.AppSettings[key].ToString());
                        break;
                    case nameof(AppConfig.appServer):
                        allkey.Add(key, ConfigurationManager.AppSettings[key].ToString());
                        break; ;
                    case nameof(AppConfig.SendEmail):
                        bool b = ConfigurationManager.AppSettings[key].ToString().ToUpper().Equals("YES") ? true : false;
                        allkey.Add(key, b);
                        break;
                    default:
                        break;
                }


            }
            if (allkey.Values.Where(n => n.Equals(string.Empty)).Count() != 0)
            {
                //var xxx = allkey.Values.Where(n => n.Equals(string.Empty));
                Console.WriteLine("Referencing a null app key value: Mandatory app key value is not set in the App.config" + Environment.NewLine);
                Console.WriteLine(string.Join(Environment.NewLine, allkey.Where(n => n.Value.ToString() == string.Empty).Select(n => n.Key + " : " + n.Value + "Null").ToArray()));
                Console.Title = "Referencing a Null key";
                flag = false;
            }
            else
                flag = true;

            //check email validation and recipient
            if (allkey.Where(n => n.Key.ToUpper().Equals("SendEmail".ToUpper())).Select(n => n.Value).Select(n => n).ToArray().First().Equals(true))
            {
                if (string.IsNullOrEmpty(fromEmail)
                    || string.IsNullOrEmpty(Recipients)
                    || string.IsNullOrEmpty(appServer))
                {
                    Console.WriteLine("Sending data classification SpreadSheet via email requires fromEmail, RecipientEmail and appServer address to be set in the app.config");
                    return false;
                }
            }
            return flag;
        }
    }

}
