using ClosedXML.Excel;
using OfficeOpenXml;
using Oracle.DataAccess.Client;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text;

namespace ViewBLOB
{
    class Program
    {
        //private static DataTable dataTable;

        static void Main(string[] args)
        {

            


            string connectionString = ConfigurationManager.AppSettings["connectionString"];
            string datasource = ConfigurationManager.AppSettings["DataSourceType"];
            string scriptPath = @"Tab_ColumnsSQL.sql";
            string csvOutputfilename = ConfigurationManager.AppSettings["OutputFilename"];
            DataTable getdata = new DataTable();
            DataTable data = GetdataTable(connectionString, datasource, scriptPath);
            var tablename = data.Rows.OfType<DataRow>().Select(dr => dr.Field<string>("table_name")).ToList();
            var columnList = data.Rows.OfType<DataRow>().Select(dr => dr.Field<string>("column_name")).ToList();
            getdata.Merge(data);
            DataColumn[] dc = new DataColumn[] {
                new DataColumn("Min", typeof(string)),
                new DataColumn("max", typeof(string)),
                new DataColumn("Retain NULL",typeof(string)),
                new DataColumn("Public", typeof(string)),
                new DataColumn("Personal", typeof(string)),
                new DataColumn("Sensitive",typeof(string)),
                new DataColumn("Masking Rule", typeof(string)),
                 new DataColumn("Rule set by", typeof(string)),
                new DataColumn("Rule Reasoning",typeof(string)),
                new DataColumn("COMPLETED", typeof(string))
                };
            //data.Columns.Add("Min");
            // data.Columns.Add("max");
            //data.Columns.Add("Retain NULL"); 
            data.Columns.AddRange(dc);
            Random random = new Random();
            List<string> rantbool = new List<string>() { "Yes", "No" };
            List<string> isNull = new List<string>() { "TRUE", "FALSE" };
            List<string> MaskingRules = new List<string>() { "No Masking required", "Replace Value with fake data", "Shuffle", "Math", "Flagged", "Scramble"};

            foreach (DataColumn columns in data.Columns)
            {
                foreach (DataRow rows in data.Rows)
                {
                    rows["Retain NULL"] = isNull[random.Next(0, isNull.Count)].ToString(); ;
                    rows["COMPLETED"] = "Uncompleted";
                    rows["Public"] = rantbool[random.Next(0,rantbool.Count)].ToString();
                    rows["Personal"] = rantbool[random.Next(0, rantbool.Count)].ToString(); ;
                    rows["Sensitive"] = rantbool[random.Next(0, rantbool.Count)].ToString(); ;
                    rows["Rule set by"] = "BA Name";
                    rows["Masking Rule"] = MaskingRules[random.Next(0, MaskingRules.Count)].ToString(); ;
                    if (rows["data_type"].ToString().Contains("DATE"))
                    {
                        string tname = rows["table_name"].ToString();
                        string colname = rows["column_name"].ToString();
                        DataTable dtMinMax = new DataTable();
                        dtMinMax  = GetMinMax(rows["table_name"].ToString(), rows["column_name"].ToString(),connectionString,datasource);
                        if (dtMinMax != null && dtMinMax.Rows.Count > 0)
                        {
                            var min = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<DateTime?>("Min")).ToList()[0];
                            var max = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<DateTime?>("Max")).ToList()[0];
                            rows["Min"] = min;
                            rows["Max"] = max;
                            data.AcceptChanges();
                        }
                       
                    }
                    else if (rows["data_type"].ToString().Contains("NUMBER") || rows["data_type"].ToString().Contains("MONEY"))
                    {
                        string tname = rows["table_name"].ToString();
                        string colname = rows["column_name"].ToString();
                        DataTable dtMinMax = new DataTable();
                        dtMinMax = GetMinMax(rows["table_name"].ToString(), rows["column_name"].ToString(), connectionString, datasource);
                        if (dtMinMax != null && dtMinMax.Rows.Count > 0)
                        {
                            var min = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<decimal?>("MIN")).ToList()[0];
                            var max = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<decimal?>("MAX")).ToList()[0];
                            rows["Min"] = min;
                            rows["Max"] = max;
                            data.AcceptChanges();
                        }
                     
                    }
                    else if (rows["data_type"].ToString().Contains("FLOAT"))
                    {
                        string tname = rows["table_name"].ToString();
                        string colname = rows["column_name"].ToString();
                        DataTable dtMinMax = new DataTable();
                        dtMinMax = GetMinMax(rows["table_name"].ToString(), rows["column_name"].ToString(), connectionString, datasource);
                        if (dtMinMax != null && dtMinMax.Rows.Count > 0)
                        {
                            var min = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<double?>("MIN")).ToList()[0];
                            var max = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<double?>("MAX")).ToList()[0];
                            rows["Min"] = min;
                            rows["Max"] = max;
                            data.AcceptChanges();
                        }

                    }
                    else if (rows["data_type"].ToString().Contains("BIT"))
                    {
                        string tname = rows["table_name"].ToString();
                        string colname = rows["column_name"].ToString();
                        DataTable dtMinMax = new DataTable();
                        dtMinMax = GetMinMax(rows["table_name"].ToString(), rows["column_name"].ToString(), connectionString, datasource);
                        if (dtMinMax != null && dtMinMax.Rows.Count > 0)
                        {
                            var min = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<bool?>("MIN")).ToList()[0];
                            var max = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<bool?>("MAX")).ToList()[0];
                            rows["Min"] = min;
                            rows["Max"] = max;
                            data.AcceptChanges();
                        }

                    }
                    else if (rows["data_type"].ToString().Equals("INT"))
                    {
                        string tname = rows["table_name"].ToString();
                        string colname = rows["column_name"].ToString();
                        DataTable dtMinMax = new DataTable();
                        dtMinMax = GetMinMax(rows["table_name"].ToString(), rows["column_name"].ToString(), connectionString, datasource);
                        if (dtMinMax != null && dtMinMax.Rows.Count > 0)
                        {
                            var min = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<int?>("MIN")).ToList()[0];
                            var max = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<int?>("MAX")).ToList()[0];
                            rows["Min"] = min;
                            rows["Max"] = max;
                            data.AcceptChanges();
                        }

                    }
                    else if (rows["data_type"].ToString().Contains("VARCHAR2") || rows["data_type"].ToString().Contains("VARCHAR"))
                    {
                        string tname = rows["table_name"].ToString();
                        string colname = rows["column_name"].ToString();
                        DataTable dtMinMax = new DataTable();
                        dtMinMax = GetMinMax(rows["table_name"].ToString(), rows["column_name"].ToString(), connectionString, datasource);
                        if (dtMinMax != null && dtMinMax.Rows.Count > 0)
                        {
                            //var min = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<decimal?>("MIN")).ToList()[0];
                            var tt = dtMinMax;
                           
                            var MaxNvarchar = dtMinMax.Rows.OfType<DataRow>().Select(dr => dr.Field<object>("MaxNvarchar")).ToList()[0];
                            //rows["Min"] = min;
                            rows["Max"] = MaxNvarchar;
                            data.AcceptChanges();
                        }
                        
                    }
                    else
                    {

                    }

                }
            }

            //write to excel
            XLWorkbook wb = new XLWorkbook();
            //wb.Worksheets.Add()

            //write to csv
            if (data.Rows != null)
            {
                DataTableToExcle(data, csvOutputfilename, csvOutputfilename);
                //exportToExcel(data, "APP_GWP");
            }

        }
        private static void DataTableToExcle(DataTable dataTable,string directory, string _tablename)
        {
             dataTable.TableName = _tablename;
        
            try
            {
                //HttpContext.Current.Response.Clear();
                if (!Directory.Exists(directory))
                {
                    Directory.CreateDirectory(directory);
                }

                var format = new ExcelTextFormat
                {
                    EOL = "\r\n"
                };
                using (ExcelPackage pack = new ExcelPackage())
                {
                    ExcelWorksheet ws = pack.Workbook.Worksheets.Add(dataTable.TableName);
                    ws.Cells["A1"].LoadFromDataTable(dataTable, true, OfficeOpenXml.Table.TableStyles.Medium28);
                    var ms = new System.IO.MemoryStream();
                    pack.SaveAs(new FileInfo(directory + @"\" + directory + ".xlsx"));

                }
            }
            catch (Exception ex)
            {
               Console.WriteLine(ex) ;
                Console.WriteLine("Hit enter to exit");
                Console.ReadLine();
            }
        }
        private static void WriteTofile(DataTable textTable, string directory)
        {
            StringBuilder fileContent = new StringBuilder();
            //int i = 0;
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }
            if (textTable.Columns.Count == 0)
            {
                return;
            }
            foreach (var col in textTable.Columns)
            {
                fileContent.Append(col.ToString() + ",");
            }

            fileContent.Replace(",", System.Environment.NewLine, fileContent.Length - 1, 1);

            foreach (DataRow dr in textTable.Rows)
            {
                foreach (var column in dr.ItemArray)
                {
                    fileContent.Append("\"" + column.ToString() + "\",");
                }

                fileContent.Replace(",", System.Environment.NewLine, fileContent.Length - 1, 1);
            }
            Console.WriteLine(directory);
            Console.ReadLine();
            Console.WriteLine(Directory.GetCurrentDirectory() + @"\" + directory + @"\" + directory + ".csv");
            Console.ReadLine();
            System.IO.File.WriteAllText(directory + @"\" + directory + ".csv", fileContent.ToString());

        }
        private static DataTable GetdataTable(string connectionString1,string datasource, string scriptpath)
        {
            DataTable dataTable = new DataTable();
            if (datasource == "OracleServer")
            {
                using (OracleConnection oracleConnection = new OracleConnection(connectionString1))
                {
                    string squery = File.ReadAllText(scriptpath);
                    //System.Collections.Generic.IEnumerable<string> commandStrings = Regex.Split(squery, @"^\s*GO\s*$",
                    //RegexOptions.Multiline | RegexOptions.IgnoreCase);

                    oracleConnection.Open();
                    using (OracleDataAdapter oda = new OracleDataAdapter(squery, oracleConnection))
                    {
                        try
                        {
                            //Fill the data table with select statement's query results:
                            int recordsAffectedSubscriber = 0;

                            recordsAffectedSubscriber = oda.Fill(dataTable);

                        }
                        catch (Exception ex)
                        {

                            Console.WriteLine(ex.Message);
                        }
                    }

                    return dataTable;

                }
            }
            else if (datasource == "SqlServer")
            {
                using (SqlConnection oracleConnection = new SqlConnection(connectionString1))
                {
                    string squery = File.ReadAllText(scriptpath);
                    //System.Collections.Generic.IEnumerable<string> commandStrings = Regex.Split(squery, @"^\s*GO\s*$",
                    //RegexOptions.Multiline | RegexOptions.IgnoreCase);

                    oracleConnection.Open();
                    using (SqlDataAdapter oda = new SqlDataAdapter(squery, oracleConnection))
                    {
                        try
                        {
                            //Fill the data table with select statement's query results:
                            int recordsAffectedSubscriber = 0;

                            recordsAffectedSubscriber = oda.Fill(dataTable);

                        }
                        catch (Exception ex)
                        {

                            Console.WriteLine(ex.Message);
                        }
                    }

                    return dataTable;

                }
            }
            else
                return null;

        }
        private static DataTable GetMinMax(string table, string column, string connectionString1,string DataSource)
        {
            DataTable dataTable = new DataTable();
            if (DataSource == "OracleServer")
            {
                using (OracleConnection oracleConnection = new OracleConnection(connectionString1))
                {
                    string squery = "Select Min(" + column + ") as Min, Max(" + column + ") as Max, Max(Length(" + column + ")) as MaxNvarchar  from " + table;
                    //System.Collections.Generic.IEnumerable<string> commandStrings = Regex.Split(squery, @"^\s*GO\s*$",
                    //RegexOptions.Multiline | RegexOptions.IgnoreCase);

                    oracleConnection.Open();
                    using (OracleDataAdapter oda = new OracleDataAdapter(squery, oracleConnection))
                    {
                        try
                        {
                            //Fill the data table with select statement's query results:
                            int recordsAffectedSubscriber = 0;

                            recordsAffectedSubscriber = oda.Fill(dataTable);

                        }
                        catch (Exception ex)
                        {

                            Console.WriteLine(ex.Message);
                        }
                    }
                    //int FileSize = 0;
                    return dataTable;
                }
            }
            else if (DataSource == "SqlServer")
            {
                using (SqlConnection oracleConnection = new SqlConnection(connectionString1))
                {
                    string squery = "Select Min(" + column + ") as Min, Max(" + column + ") as Max, Max(Len(" + column + ")) as MaxNvarchar  from " + table;
                    //System.Collections.Generic.IEnumerable<string> commandStrings = Regex.Split(squery, @"^\s*GO\s*$",
                    //RegexOptions.Multiline | RegexOptions.IgnoreCase);

                    oracleConnection.Open();
                    using (SqlDataAdapter oda = new SqlDataAdapter(squery, oracleConnection))
                    {
                        try
                        {
                            //Fill the data table with select statement's query results:
                            int recordsAffectedSubscriber = 0;

                            recordsAffectedSubscriber = oda.Fill(dataTable);

                        }
                        catch (Exception ex)
                        {

                            Console.WriteLine(ex.Message);
                        }
                    }
                    //int FileSize = 0;
                    return dataTable;
                }
            }
            else
            {
                return null;
            }
           
        }
    }
}
